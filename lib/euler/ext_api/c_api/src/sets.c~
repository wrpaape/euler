/************************************************************************************
 *                                     sets.c                                       *
 *                                                                                  *
 * Defines constants, declares helper functions, and includes libraries shared      *
 * amongst set modules.                                                             *
 ************************************************************************************/
/************************************************************************************
 *                             PREPROCESSOR DIRECTIVES                              *
 ************************************************************************************/
#include "sets.h"
/************************************************************************************
 *                               TOP LEVEL FUNCTIONS                                *
 ************************************************************************************/
void mem_error(const size_t num_bytes)
{
  fprintf(stderr, FORMAT_ERROR(failed to allocate "%lu" bytes of memory), num_bytes);
  exit(1);
}


void file_error(const char *filename)
{
  fprintf(stderr, FORMAT_ERROR(failed to open "%s\n\n  reason: %s"), filename, strerror(errno));
  exit(1);
}

int *insert_sort_by(int *data, const size_t length,
                    int (*sort_by)(const int, const int))
{
  int temp;
  int j;

  for (int i = 1; i < length; ++i) {
    temp = data[i];
    j    = i - 1;
    
   /* if current el should be ordered ahead of next previous el */
    while ((j > -1) && sort_by(temp, data[j])) {
      /* shift next previous el forward, making room for current el */
      data[j + 1] = data[j];
      --j;
    }

    /* drop current el into its proper position */
    data[j + 1] = temp;
  }

  return data;
}


int *merge_sort_by(int *data, const size_t length,
                   int (*sort_by)(const int, const int))
{
  /* determine sentinel value ("least" value according to sort_by) */
  const int sentinel = sort_by(INT_MIN, INT_MAX) ? INT_MAX : INT_MIN;

  do_split(data, 0, length - 1, sort_by, sentinel);

  return data;
}


int *select_sort_by(int *data, const size_t length,
                    int (*sort_by)(const int, const int))
{
  size_t sort_range;
  size_t i;
  size_t j;
  size_t head;
  size_t head_index;

  sort_range = length - 1;

  for (i = 0; i < sort_range; ++i) {
    head_index = i;
    head       = data[head_index];

    for (j = i + 1; j < length; ++j) {
      if (sort_by(data[j], head)) {
        head_index = j;
        head       = data[head_index];
      }
    }

    data[head_index] = data[i];
    data[i]          = head;
  }

  return data;
}
/************************************************************************************
 *                                 HELPER FUNCTIONS                                 *
 ************************************************************************************/
void do_split(int *data, const size_t i_start, const size_t i_end,
    int (*sort_by)(const int, const int), const int sentinel)
{
  /* if sub-array is longer than 1 element, recurse */
  if (i_start < i_end) {
    /* split current sub-array into left and right sub-sub-arrays */
    const size_t i_split = i_start + (i_end - i_start) / 2;

    do_split(data, i_start,     i_split, sort_by, sentinel); /* sort left */
    do_split(data, i_split + 1, i_end,   sort_by, sentinel); /* sort right */
    merge(data, i_start, i_split, i_end, sort_by, sentinel); /* merge sorted */
  }
}

void merge(int *data, const size_t i_start, const size_t i_split, const size_t i_end,
    int (*sort_by)(const int, const int), const int sentinel)
{
  size_t i_left;
  size_t i_right;
  size_t i_merge;
  size_t copy_cutoff;
  int *left_arr;
  int *right_arr;

  const size_t i_start_right    = i_split + 1;
  const size_t i_finished_merge = i_end + 1;
  const size_t length_left_arr  = i_split - i_start       + 2;
  const size_t length_right_arr = i_end   - i_start_right + 2;

  left_arr  = (int *) malloc(sizeof(int) * length_left_arr);
  right_arr = (int *) malloc(sizeof(int) * length_right_arr);

  /* copy right sub-array data to 'right_arr' */
  copy_cutoff = length_left_arr - 1;
  for (i_left = 0; i_left < copy_cutoff; ++i_left) {
    left_arr[i_left] = data[i_start + i_left];
  }
  left_arr[i_left] = sentinel;  /* append sentinel value */

  /* copy right sub-array data to 'right_arr' */
  copy_cutoff = length_right_arr - 1;
  for (i_right = 0; i_right < copy_cutoff; ++i_right) {
    right_arr[i_right] = data[i_start_right + i_right];
  }
  right_arr[i_right] = sentinel; /* append sentinel value */

  i_left  = 0;
  i_right = 0;


  for (i_merge = i_start; i_merge < i_finished_merge; ++i_merge) {
    if (sort_by(left_arr[i_left], right_arr[i_right])) {
      data[i_merge] = left_arr[i_left];
      ++i_left;

    } else {
      data[i_merge] = right_arr[i_right];
      ++i_right;
    }
  }

  free(left_arr);
  free(right_arr);
}
