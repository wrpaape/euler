/******************************************************************************
 *                                  - Set4.java -                             *
 *                                                                            *
 * Abstract class 'Set4' houses solutions for problems 31-40.                 *
 ******************************************************************************/
import java.util.stream.IntStream;
import java.util.List;
import java.util.LinkedList;
import java.util.Iterator;

public abstract class Set4 {
  /****************************************************************************
   *                              - problem32 -                               *
   *                                                                          *
	 * We shall say that an n-digit number is pandigital if it makes use of all *
   * the digits 1 to n exactly once; for example, the 5-digit number, 15234,  *
   * is 1 through 5 pandigital.                                               *
   *                                                                          *
	 * The product 7254 is unusual, as the identity, 39 Ã— 186 = 7254,           *
   * containing multiplicand, multiplier, and product is 1 through 9          *
   * pandigital.                                                              *
   *                                                                          *
	 * Find the sum of all products whose multiplicand/multiplier/product       *
   * identity can be written as a 1 through 9 pandigital.                     *
   *                                                                          *
	 * HINT: Some products can be obtained in more than one way so be sure to   *
   * only include it once in your sum.                                        *
   ****************************************************************************/
  public static Integer problem32() { 

    return IntStream.range(2, 10)
                    .flatMap(Set4::doProducts)
                    .distinct()
                    .sum();
  }

  private static LinkedList<Integer> doProducts(int splitNum) {

    int[] leftDigits = IntStream.range(1, splitNum)
                                .toArray();

    int[] rightDigits = IntStream.range(splitNum, 10)
                                 .toArray();

    return products;
  }

  private static LinkedList<Integer> combinations(List<Integer> list) {
    Iterator<Integer> listIter = list.iterator();

  }

  private static LinkedList<Integer> doComb(List<Integer> remEls, List<Integer> accCombs) {

  }
}
